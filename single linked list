class Node:
def init(self, data):
self.data = data
self.next = None

class LinkedList:
def init(self):
self.head = None

def insert_at_beginning(self, data):
new_node = Node(data)
new_node.next = self.head
self.head = new_node

def insert_at_end(self, data):
new_node = Node(data)
if self.head is None:
self.head = new_node
return
last = self.head
while last.next:
last = last.next
last.next = new_node

def insert_at_position(self, data, position):
if position < 0 or position > self.get_length():
print("Invalid position")
return
if position == 0:
self.insert_at_beginning(data)
return
if position == self.get_length():
self.insert_at_end(data)
return
new_node = Node(data)
current = self.head
i = 0
while i < position - 1:
current = current.next
i += 1
new_node.next = current.next
current.next = new_node

def get_length(self):
length = 0
current = self.head
while current:
length += 1
current = current.next
return length

def print_list(self):
current = self.head
while current:
print(current.data)
current = current.next

DELETION
class Node:
def init(self, data=None):
self.data = data
self.next = None

class SinglyLinkedList:
def init(self):
self.head = None

def delete_at_beginning(self):
if self.head is None:
return
self.head = self.head.next

def delete_at_ending(self):
if self.head is None:
return
if self.head.next is None:
self.head = None
return
current = self.head
while current.next.next is not None:
current = current.next
current.next = None

def delete_at_position(self, position):
if self.head is None:
return
if position == 0:
self.head = self.head.next
return
current = self.head
current_position = 0
while current is not None and current_position < position - 1:
current = current.next
current_position += 1
if current is None or current.next is None:
return
current.next = current.next.next

Search, Count the Number of Nodes and Display
class Node:
def init(self, data=None):
self.data = data
self.next = None

class SinglyLinkedList:
def init(self):
self.head = None

def search(self, data):
current = self.head
while current is not None:
if current.data == data:
return True
current = current.next
return False

def count(self):
current = self.head
count = 0
while current is not None:
count += 1
current = current.next
return count

def display(self):
current = self.head
while current is not None:
print(current.data)
current = current.next
