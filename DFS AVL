class Graph:
def init(self, num_vertices):
self.num_vertices = num_vertices
self.adj_matrix = [[0 for _ in range(num_vertices)] for _ in range(num_vertices)]

def add_edge(self, v1, v2):
self.adj_matrix[v1][v2] = 1
self.adj_matrix[v2][v1] = 1

def remove_edge(self, v1, v2):
if self.contains_edge(v1, v2):
self.adj_matrix[v1][v2] = 0
self.adj_matrix[v2][v1] = 0

def contains_edge(self, v1, v2):
return True if self.adj_matrix[v1][v2] > 0 else False

def __dfs_helper(self, vertex, visited):
visited.add(vertex)
print(vertex)
for v in range(self.num_vertices):
if self.adj_matrix[vertex][v] > 0 and v not in visited:
self.__dfs_helper(v, visited)

def dfs(self):
visited = set()
for vertex in range(self.num_vertices):
if vertex not in visited:
self.__dfs_helper(vertex, visited)

BFS
class Graph:
def init(self, num_vertices):
self.num_vertices = num_vertices
self.adj_matrix = [[0 for _ in range(num_vertices)] for _ in range(num_vertices)]

def add_edge(self, v1, v2):
self.adj_matrix[v1][v2] = 1
self.adj_matrix[v2][v1] = 1

def remove_edge(self, v1, v2):
if self.contains_edge(v1, v2):
self.adj_matrix[v1][v2] = 0
self.adj_matrix[v2][v1] = 0

def contains_edge(self, v1, v2):
return True if self.adj_matrix[v1][v2] > 0 else False

def bfs(self, start_vertex):
visited = set()
queue = deque([start_vertex])
visited.add(start_vertex)
while queue:
vertex = queue.popleft()
print(vertex)
for v in range(self.num_vertices):
if self.adj_matrix[vertex][v] > 0 and v not in visited:
visited.add(v)
queue.append(v)
